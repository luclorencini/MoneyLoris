<partial name="_Moeda" />

@using (Html.VueTemplate())
{
    <script type="text/html" id="template-report-lanc-cat">

        <section class="sys-container-fullhd container-titulo">
            <div class="area-titulo">
                @await Html.PartialAsync("_BotaoVoltar")
                <div class="titulo">Lançamentos por Categoria</div>
            </div>
        </section>

        <section class="sys-container-fullhd">

            <!-- filtro mobile -->
            <div class="barra-filtro-periodo">
                <i aria-hidden="true" class="fa-solid fa-chevron-left" v-on:click="retrocederMes()"></i>
                <span class="text-capitalize">{{mesPorExtenso(filtro.mes)}} {{filtro.ano}}</span>
                <i aria-hidden="true" class="fa-solid fa-chevron-right" v-on:click="avancarMes()"></i>
            </div>

            <!-- filtro desktop -->
            <div class="row g-1 mb-3">
                <div class="col col-12 d-none d-lg-flex flex-wrap align-items-center mt-2">
                    <label class="me-3 fw-bold">Filtros rápidos:</label>

                    <div class="filtro-rapido-opcao" v-on:click="retrocederAno()">
                        <i aria-hidden="true" class="fa-solid fa-chevron-left" ></i>
                    </div>

                    <div class="filtro-rapido-opcao" v-on:click="filtrarAnoAtual()">{{obterAnoAtual()}}</div>

                    <div class="filtro-rapido-opcao me-4" v-on:click="avancarAno()">
                        <i aria-hidden="true" class="fa-solid fa-chevron-right" ></i>
                    </div>

                    <div class="filtro-rapido-opcao" v-on:click="filtrarUltimos12Meses()">Últimos 12 meses</div>

                </div>
            </div>

        </section>

        <section class="sys-container-fullhd">

            <div class="list-group list-group-flush">
                <div class="list-group-item p-0">

                    <div class="rep-linha rep-linha-titulo">

                        <div class="item">
                            <i class="sys-fg-dark-2 mx-2" v-bind:class="{'fa-solid fa-square-minus': !allClosed, 'fa-solid fa-square-plus': allClosed}" v-on:click="collapseAll()"></i>
                        </div>

                        <template v-if="filtro.quantidade > 1">
                            <div class="mes mes-titulo" v-for="i in cabecalhoItens">
                                <div class="m">{{i.mes}}</div>
                                <div class="y">{{i.ano}}</div>
                            </div>
                        </template>

                    </div>

                </div>
            </div>


            <div class="list-group list-group-flush" v-for="n1 in dados">
                <div class="list-group-item p-0">
                    <div class="rep-linha" v-bind:class="[n1.valor01 > 0 ? 'rep-linha-receita' : 'rep-linha-despesa']">

                        <div class="item item-g1">
                            <i class="sys-fg-dark-4 adm-clicavel me-2" v-bind:class="{'fa-solid fa-square-minus': !n1.closed, 'fa-solid fa-square-plus': n1.closed}" v-on:click="collapse(n1)"></i>
                            <span>{{n1.descricao}}</span>
                        </div>

                        <div class="mes valor-g1" v-for="n in filtro.quantidade">
                            <Moeda :valor="n1[valorField(n)]" :retirarCifrao="true" :retirarSinal="true"></Moeda>
                        </div>

                    </div>

                    <template v-if="!n1.closed && n1.items">
                        <div class="list-group list-group-flush" v-for="n2 in n1.items">
                            <div class="list-group-item p-0">
                                <div class="rep-linha">

                                    <div class="item item-g2">
                                        <i v-if="!n2.items" class="sys-fg-dark-4 fa-regular fa-square-minus me-2"></i>
                                        <i v-else class="sys-fg-dark-4 adm-clicavel me-2" v-bind:class="{'fa-solid fa-square-minus': !n2.closed, 'fa-solid fa-square-plus': n2.closed}" v-on:click="collapse(n2)"></i>
                                        <span>{{n2.descricao}}</span>
                                    </div>

                                    <div class="mes valor-g2" v-for="n in filtro.quantidade">
                                        <Moeda :valor="n2[valorField(n)]" :retirarCifrao="true" :retirarSinal="true"></Moeda>
                                    </div>

                                </div>

                                <template v-if="!n2.closed && n2.items">
                                    <div class="list-group list-group-flush" v-for="n3 in n2.items">
                                        <div class="list-group-item p-0">
                                            <div class="rep-linha">

                                                <div class="item item-g3" v-bind:class="{ 'fst-italic' : !  n3.descricao}">
                                                    <span>{{n3.descricao ? n3.descricao : '(sem subcategoria)'}}</span>
                                                </div>

                                                <div class="mes valor-g3" v-for="n in filtro.quantidade">
                                                    <Moeda :valor="n3[valorField(n)]" :retirarCifrao="true" :retirarSinal="true"></Moeda>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </template>

                            </div>
                        </div>
                    </template>

                </div>
            </div>

        </section>

    </script>
}

@using (Html.VueScript())
{
    <script type="text/javascript">

        const LancamentoCategoriaReport = {

            name: 'LancamentoCategoriaReport',
            template: '#template-report-lanc-cat',
            mixins: [BaseMixin],
            components: { Moeda },

            data: () => ({
                filtro: {},
                dados: [],
                allClosed: false
            }),

            computed: {

                cabecalhoItens() {
                    let ci = []

                    if (this.filtro && this.filtro.mes) {
                        for (let i = this.filtro.mes; i < this.filtro.mes + this.filtro.quantidade; i++) {
                            
                            let mes = (i <= 12 ? i : i - 12);
                            let ano = (i <= 12 ? this.filtro.ano : this.filtro.ano + 1);

                            let item = {
                                mes: this.mesAbreviado(mes),
                                ano: ano
                            };

                            ci.push(item);
                        }
                    }

                    return ci;
                },
            },

            async mounted() {

                this.inicializarFiltro();

                await this.obterRelatorio();
            },

            methods: {

                //métodos de filtro

                inicializarFiltro() {

                    this.filtro.ano = this.obterAnoAtual();

                    //desktop sempre filtra 12 meses, inicial do ano corrente
                    if (window.innerWidth > 991) {
                        this.filtro.mes = 1; //jan
                        this.filtro.quantidade = 12;
                    }

                    //mobile sempre filtra 1 mes, partindo do mes corrente
                    else {
                        this.filtro.mes = this.obterMesAtual();
                        this.filtro.quantidade = 1;
                    }
                },

                async filtrarAnoAtual() {
                    this.filtro.ano = this.obterAnoAtual();
                    this.filtro.mes = 1;
                    await this.obterRelatorio();
                },

                async retrocederAno() {
                    this.filtro.ano = this.filtro.ano - 1;
                    this.filtro.mes = 1;
                    await this.obterRelatorio();
                },

                async avancarAno() {
                    this.filtro.ano = this.filtro.ano + 1;
                    this.filtro.mes = 1;
                    await this.obterRelatorio();
                },

                async filtrarUltimos12Meses() {
                    this.filtro.mes = this.obterMesAtual();
                    this.filtro.ano = this.obterAnoAtual() - 1;
                    await this.obterRelatorio();
                },

                async retrocederMes() {
                    if (this.filtro.mes == 1) {
                        this.filtro.mes = 12;
                        this.filtro.ano = this.filtro.ano - 1;
                    }
                    else {
                        this.filtro.mes = this.filtro.mes - 1;
                    }

                    await this.obterRelatorio();
                },

                async avancarMes() {
                    if (this.filtro.mes == 12) {
                        this.filtro.mes = 1;
                        this.filtro.ano = this.filtro.ano + 1;
                    }
                    else {
                        this.filtro.mes = this.filtro.mes + 1;
                    }

                    await this.obterRelatorio();
                },

                obterAnoAtual() {
                    return new Date().getFullYear();
                },

                obterMesAtual() {
                    return new Date().getMonth() + 1;
                },



                //métodos do report

                async obterRelatorio() {

                    await this.showLoadingSplashAndExecute(async () => {

                        let ret = await fetchData.fetchPostJson(`/relatorio/pesquisar`, this.filtro);

                        if (ret.ok) {
                            this.dados = ret.value;
                        }
                        else {
                            mensagemSistema.showMensagemErro(ret.message);
                        }
                    });
                },

                collapseAll() {

                    for (n1 of this.dados) {
                        for (n2 of n1.items) {
                            n2.closed = this.allClosed;
                            this.collapse(n2);
                        }
                    }

                    this.allClosed = !this.allClosed;
                },

                collapse(d) {
                    if (!d.closed) {
                        d.closed = true;
                    }
                    else {
                        d.closed = !d.closed;
                    }
                },

                valorField(n) {
                    return 'valor' + (n + '').padStart(2, '0');
                },

                mesAbreviado(n) {
                    const d = new Date(this.filtro.ano, n - 1, 1);
                    return utils.dataMesShort(d);
                },

                mesPorExtenso(n) {
                    const d = new Date(this.filtro.ano, n - 1, 1);
                    return `${d.toLocaleString('pt-BR', { month: 'long' })}`;
                }
            }
        }

    </script>
}

@using (Html.VueStyle())
{
    <style type="text/css">

        .filtro-rapido-opcao {
            margin: 0 0.25rem;
            padding: 0.25rem 0.75rem;
            /*min-width: 6rem;*/
            border: 1px solid var(--sys-color-dark-4);
            border-radius: 5px;
            color: var(--sys-color-dark-4);
            background-color: white;
            font-weight: bold;
            text-align: center;
        }

            .filtro-rapido-opcao:hover {
                filter: brightness(90%);
                cursor: pointer;
            }

            .filtro-rapido-opcao:active {
                transition-duration: 0.1s;
                transform: scale(0.9);
            }

        .barra-filtro-periodo {
            display: none;
        }

        @@media (max-width: 991px) { /*lg*/

            .barra-filtro-periodo {
                padding: 0.75rem 2rem;
                background-color: var(--sys-color-dark-4);
                display: flex;
                align-items: center;
                justify-content: space-between;
                font-size: 1rem;
                font-weight: 500;
                color: #fff;
                height: 3.25rem;
            }

                .barra-filtro-periodo i {
                    font-size: 1.5rem;
                }
        }



        .rep-linha {
            display: grid;
            grid-template-columns: auto repeat(12, 7%);
            grid-auto-flow: column;
            color: var(--sys-color-dark-1);
        }

        @@media (max-width: 991px) { /*lg*/
            .rep-linha {
                grid-template-columns: auto 9rem;
            }
        }

        .rep-linha .item {
            display: flex;
            align-items: center;
            border: 1px solid var(--sys-color-light-2);
            padding: 0 0.25rem;
        }

        .rep-linha .mes {
            border: 1px solid var(--sys-color-light-2);
        }

        .rep-linha:not(.rep-linha-titulo):hover {
            background-color: #fffde7;
        }

        .rep-linha-titulo {
            min-height: 1.25rem;
        }

        .rep-linha-receita {
            background-color: #e1f5fe;
        }

        .rep-linha-despesa {
            background-color: #ffebee;
        }


        .mes-titulo {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.5rem 0;
        }

            .mes-titulo .m {
                font-size: 1.35rem;
                line-height: 1.25rem;
                font-weight: bold;
            }

            .mes-titulo .y {
                font-size: 1rem;
                line-height: 1.35rem;
                font-weight: bold;
            }

        .rep-linha .item.item-g1 {
            text-transform: uppercase;
            font-weight: bold;
            padding-left: 0.5rem;
        }

        .rep-linha .item.item-g2 {
            font-weight: bold;
            padding-left: 1.25rem;
        }

        .rep-linha .item.item-g3 {
            padding-left: 2rem;
        }

        .valor-g1 {
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: end;
            padding: 0 0.5rem;
            font-size: 1.2rem;
            font-weight: bold;
        }

        .valor-g2 {
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: end;
            padding: 0 0.5rem;
            font-size: 1rem;
            font-weight: bold;
        }

        .valor-g3 {
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: end;
            padding: 0 0.5rem;
            font-size: 1rem;
            font-weight: 500;
        }

    </style>
}