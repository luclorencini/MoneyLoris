@using (Html.VueTemplate())
{
    <script type="text/html" id="template-lancamento-wizard">

        <div class="offcanvas offcanvas-end" tabindex="-1" ref="offcanvasLancamentoWizard" style="width: 35rem;">
            <div class="offcanvas-header">
                <i v-on:click="retornarPasso()" class="fa-solid fa-arrow-left fa-2x sys-fg-dark-2 me-2 sys-clicavel"></i>
                <h5 class="offcanvas-title">Lançar {{labelTipo}}</h5>
                <button type="button" class="btn-close" v-on:click="fechar()"></button>
            </div>
            <div class="offcanvas-body pt-0">

                <template v-if="passo == 1">

                    <h5 class="my-2">Em qual conta ou cartão você vai lançar a {{labelTipo}}?</h5>

                    <ul class="list-group">
                        <li v-for="m in meios" class="list-group-item sys-clicavel py-2" v-on:click="selecionarMeioPagamento(m)">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex flex-wrap align-items-center">
                                    <i class="fa-solid fa-2x ms-1 me-3" v-bind:class="utils.cssIconeByTipoConta(m.tipo)" v-bind:style="{ 'color': '#' + m.cor}"></i>
                                    <div>
                                        <div class="fw-bold fs-6 lh-1">{{m.nome}}</div>
                                        <small class="fst-italic lh-1">{{m.tipoDescricao}}</small>
                                    </div>
                                </div>
                                <i aria-hidden="true" class="fa-solid fa-arrow-right fa-xl sys-fg-dark-2 me-1"></i>
                            </div>
                        </li>
                    </ul>

                </template>

                <template v-else-if="passo == 2">

                    <form ref="formPasso2" onsubmit="return false;">
                        <div class="container">
                            <div class="row">

                                <div class="col col-12">
                                    <h5 class="my-2">Qual é o valor?</h5>
                                    <div class="input-group mb-3">
                                        <span class="input-group-text fw-bold fs-3">R$</span>
                                        <input ref="campoValor" class="form-control form-control-lg fw-bold fs-2"
                                            type="text" inputmode="decimal" required maxlength="10"
                                            v-model="dados.valor" v-ext-mask="'dinheiro'" v-on:keyup.enter="avancarPasso3()">
                                    </div>
                                </div>

                                <div class="col col-12">
                                    <h5 class="my-2">Quando foi a despesa?</h5>
                                    <input class="form-control form-control-lg fw-bold fs-3" type="date" required v-model="dados.data">
                                </div>

                                <div class="col col-12 mt-3 text-end">
                                    <button class="btn btn-outline-primary" type="button" v-on:click="avancarPasso3()">
                                        <span>Próximo</span>
                                        <i class="fa-solid fa-arrow-right ms-1"></i>
                                    </button>
                                </div>

                            </div>
                        </div>
                    </form>

                </template>

                <template v-else-if="passo == 3">

                    <form ref="formPasso3" onsubmit="return false;">
                        <div class="container">
                            <div class="row">

                                <div class="col col-12">
                                    <h5 class="my-2">Informe uma curta descrição:</h5>
                                    <input ref="campoDescricao" class="form-control form-control-lg fs-4" type="text" required
                                    v-model="dados.descricao" v-on:input="filtrarSugestoesInput()" v-on:keyup.enter="avancarPasso4()">
                                </div>

                                <div class="col col-12 mt-3 text-end">
                                    <button class="btn btn-outline-primary" type="button" v-on:click="avancarPasso4()">
                                        <span>Próximo</span>
                                        <i class="fa-solid fa-arrow-right ms-1"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>

                    <div class="d-flex align-items-center mt-1 mb-2">
                        <i class="fa-solid fa-clock-rotate-left fa-xl sys-fg-dark-4 me-2"></i>
                        <div class="fs-5">{{labelTipo}}s recentes:</div>
                    </div>

                    <ul class="list-group" v-if="sugestoes.length > 0">
                        <li v-for="s in sugestoes" class="list-group-item sys-clicavel py-1" v-on:click="selecionarSugestao(s)">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex flex-column flex-wrap">
                                    <div class="fw-bold fs-6">{{s.descricao}}</div>
                                    <small class="fst-italic"><span>{{s.categoria.categoriaNome}}</span><span v-if="s.categoria.subcategoriaNome"> / {{s.categoria.subcategoriaNome}}</span></small>
                                </div>
                                <i aria-hidden="true" class="fa-solid fa-arrow-right fa-xl sys-fg-dark-2 me-1"></i>
                            </div>
                        </li>
                    </ul>

                </template>

                <template v-else-if="passo == 4">

                    <h5 class="my-2">Qual categoria?</h5>

                    <ul class="list-group">
                        <li v-for="c in categorias" class="list-group-item sys-clicavel py-2" v-on:click="selecionarCategoria(c)">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="fs-6" v-bind:class="{'ms-4' : c.subcategoriaId}">{{c.subcategoriaId ? c.subcategoriaNome : c.categoriaNome}}</div>
                                <i aria-hidden="true" class="fa-solid fa-arrow-right fa-xl sys-fg-dark-2 me-1"></i>
                            </div>
                        </li>
                    </ul>

                </template>

                <template v-else-if="passo == 5">

                    <div class="container">

                        <div class="d-flex justify-content-center mb-3">
                            <div class="fs-3">Confira se está tudo certo:</div>
                        </div>

                        <div class="d-flex align-items-center my-4">
                            <div class="resumo-icone-container">
                                <i class="fa-solid fa-sack-dollar fa-3x sys-fg-dark-2 me-2"></i>
                            </div>
                            <div class="fs-1 fw-bold" v-bind:class="[this.tipo == 1 ? 'din-receita' : 'din-despesa']">
                                <Moeda :valor="valorDecimal" :retirarCor="true" :retirarSinal="true"/>
                            </div>
                        </div>

                        <div class="d-flex align-items-center my-4">
                            <div class="resumo-icone-container">
                                <i class="fa-regular fa-calendar-days fa-3x sys-fg-dark-2 me-2"></i>
                            </div>
                            <div class="fs-2 fw-bold text-capitalize">{{dataPorExtenso}}</div>
                        </div>

                        <div class="d-flex align-items-center my-4">
                            <div class="resumo-icone-container">
                                <i class="fa-regular fa-pen-to-square fa-3x sys-fg-dark-2 me-2"></i>
                            </div>
                            <div>
                                <div class="fs-4 fw-bold">{{dados.descricao}}</div>
                                <div class="fs-5 fst-italic lh-1">
                                    <span>{{dados.nomeCategoria}}</span><span v-if="dados.idSubcategoria"> / {{dados.nomeSubCategoria}}</span>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center my-4">
                            <div class="resumo-icone-container">
                                <i class="fa-solid fa-3x me-3" v-bind:class="utils.cssIconeByTipoConta(meioPagamentoSelecionado.tipo)" v-bind:style="{ 'color': '#' + meioPagamentoSelecionado.cor}"></i>
                            </div>
                            <div>
                                <div class="fs-4 fw-bold">{{meioPagamentoSelecionado.nome}}</div>
                                <div class="fs-6 fst-italic lh-1">{{meioPagamentoSelecionado.tipoDescricao}}</div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center mt-5">
                             <button class="btn btn-primary btn-lg w-100" type="button" v-on:click="salvar()">
                                <span class="sys-fg-dark-3 fw-bold">Lançar {{labelTipo}}</span>
                            </button>
                        </div>

                    </div>

                </template>

            </div>
        </div>

    </script>
}

@using (Html.VueScript())
{
    <script type="text/javascript">

        const LancamentoWizard = {

            name: 'LancamentoWizard',
            template: '#template-lancamento-wizard',
            mixins: [BaseMixin],
            components: { Moeda, ConfirmationDialog },
            emits: ['lancamento-realizado'],

            data: () => ({

                dados: {},
                tipo: 1,
                passo: 1,

                meios: [],
                meioPagamentoSelecionado: {},
                sugestoes: [],
                categorias: [],

                offCanvas: null,
            }),

            computed: {

                labelTipo() {
                    return (this.tipo == 1 ? "Receita" : "Despesa");
                },

                valorDecimal() {
                    let str = mascaras.parseMoney(this.dados.valor);
                    str = mascaras.unparseMoney(str);
                    return parseFloat(str);
                },

                dataPorExtenso() {
                    const d = utils.inputToDate(this.dados.data);
                    return utils.dataExtenso(d);
                }
            },

            mounted() {
            },

            methods: {

                fechar() {
                    bootstrapHelper.closeOffcanvas(this.offCanvas);
                },

                async initReceita() {
                    await this._init(1); // 1 - receita
                },

                async initDespesa() {
                    await this._init(2); // 2 - despesa
                },

                async _init(t) {

                    //clean-up
                    this.tipo = t;
                    this.dados = {};
                    this.meios = [];
                    this.meioPagamentoSelecionado = {};
                    this.sugestoes = [];
                    this.categorias = [];

                    await this.iniciarPasso1();

                    this.offCanvas = bootstrapHelper.openOffcanvas(this.$refs.offcanvasLancamentoWizard);
                },

                retornarPasso() {
                    if (this.passo == 1)
                        this.fechar();
                    else
                        this.passo = this.passo - 1;
                },


                // passo 1

                async iniciarPasso1() {
                    this.passo = 1;
                    await this.obterMeiosPagamento();
                },

                async obterMeiosPagamento() {

                    await this.setLoadingAndExecute(async () => {
                        let ret = await fetchData.fetchGetJson(`/common/meiosPagamento`);
                        this.meios = ret.value;
                    });
                },

                selecionarMeioPagamento(m) {
                    this.dados.idMeioPagamento = m.id;
                    this.meioPagamentoSelecionado = m;
                    this.avancarPasso2();
                },

                // passo 2

                avancarPasso2() {
                    this.passo = 2;
                    this.dados.data = utils.dateToInput(new Date());
                    this.setFocus('campoValor');
                },

                // passo 3

                async avancarPasso3() {

                    let passo2valido = this.validarForm(this.$refs.formPasso2);

                    if (passo2valido) {
                        this.passo = 3;
                        this.setFocus('campoDescricao');
                        await this.buscarSugestoes();
                    }
                },

                async filtrarSugestoesInput() {
                    let val = this.$refs.campoDescricao.value;
                    this.dados.descricao = val;
                    await this.buscarSugestoes(val);
                },

                async buscarSugestoes(termo) {

                    await this.setLoadingAndExecute(async () => {
                        const url = (this.tipo == 1 ? '/lancamento/sugestoesReceitas' : '/lancamento/sugestoesDespesas');
                        let ret = await fetchData.fetchPostJson(url, termo);
                        this.sugestoes = ret.value;
                    });
                },

                selecionarSugestao(s) {
                    this.dados.descricao = s.descricao;
                    this.selecionarCategoria(s.categoria);
                },

                // passo 4 - categoria

                async avancarPasso4() {

                    let passo3valido = this.validarForm(this.$refs.formPasso3);

                    if (passo3valido) {
                        this.passo = 4;
                        await this.obterCategorias();
                    }
                },

                async obterCategorias() {

                    await this.setLoadingAndExecute(async () => {
                        let ret = await fetchData.fetchGetJson(`/common/categorias/${this.tipo}`);
                        this.categorias = ret.value;
                    });
                },

                selecionarCategoria(c) {

                    this.dados.idCategoria = c.categoriaId;
                    this.dados.nomeCategoria = c.categoriaNome;
                    this.dados.idSubcategoria = c.subcategoriaId;
                    this.dados.nomeSubCategoria = c.subcategoriaNome;

                    this.avancarPasso5();
                },

                // passo 5 - resumo

                avancarPasso5() {
                    this.passo = 5;
                },

                async salvar() {

                    await this.setLoadingAndExecute(async () => {

                        try {

                            //conversoes
                            fieldConverter.stringToMoney(this.dados, 'valor');

                            const url = (this.tipo == 1 ? '/lancamento/lancarReceita' : '/lancamento/lancarDespesa');

                            let ret = await fetchData.fetchPostJson(url, this.dados);

                            if (ret.ok) {
                                mensagemSistema.showMensagemSucesso(ret.message);
                                this.fechar();
                                this.$emit('lancamento-realizado');
                            }
                            else {
                                mensagemSistema.showMensagemErro(ret.message);
                            }
                        }
                        catch (e) {
                            mensagemSistema.showMensagemErro(e);
                        }
                    });
                }

            }
        }

    </script>
}

@using (Html.VueStyle())
{
    <style type="text/css">

        .resumo-icone-container {
            width: 4.5rem;
            text-align: center;
        }

    </style>
}
