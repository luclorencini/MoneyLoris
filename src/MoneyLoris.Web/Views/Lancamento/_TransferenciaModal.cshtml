@using (Html.VueTemplate())
{
    <script type="text/html" id="template-transferencia-modal">

        <div class="modal" ref="modalForm" tabindex="-1" v-ext-loading="loading">
            <div class="modal-dialog modal-dialog-centered modal-md modal-fullscreen-lg-down">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5">Editar Transferência</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form ref="form">
                            <div class="row g-2">

                                <div class="col-12">
                                    <label class="form-label required-asterisk">Conta Origem</label>
                                    <select class="form-select" v-model="transferencia.idMeioPagamentoOrigem">
                                        <option v-for="m in meiosOrigem" :value="m.id">{{m.nome}}</option>
                                    </select>
                                </div>

                                <div class="col-12">
                                    <label class="form-label required-asterisk">{{labelContaCartao}} Destino</label>
                                    <select class="form-select" v-model="transferencia.idMeioPagamentoDestino">
                                        <option v-for="m in meiosDestino" :value="m.id">{{m.nome}}</option>
                                    </select>
                                </div>

                                <div class="col-12">
                                    <label class="form-label required-asterisk">Data</label>
                                    <input class="form-control" type="date" v-model="transferencia.data">
                                </div>

                                <div class="col-6">
                                    <label class="form-label required-asterisk">Valor</label>
                                    <div class="input-group mb-3">
                                        <span class="input-group-text">R$</span>
                                        <input class="form-control" type="text" inputmode="decimal" required maxlength="10" v-model="transferencia.valor" v-ext-mask="'dinheiro'">
                                    </div>
                                </div>

                                <div class="col-6" v-if="hasFatura">
                                    <label class="form-label ms-2">Fatura</label>
                                    <div class="form-control-plaintext ms-2">{{utils.mesAbreviado(transferencia.faturaMes)}} / {{transferencia.faturaAno}}</div>
                                </div>

                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <div class="d-flex justify-content-between w-100">
                            <button type="button" class="btn btn-danger" v-on:click="excluir()">Excluir</button>
                            <div class="d-flex justify-content-end w-100">
                                <button type="button" class="btn btn-secondary" v-on:click="fechar()">Cancelar</button>
                                <button type="button" class="btn btn-primary ms-2" v-on:click="salvar()">Salvar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <ConfirmationDialog ref="confirmaAcao"></ConfirmationDialog>

    </script>
}

@using (Html.VueScript())
{
    <script type="text/javascript">

        const TransferenciaModal = {

            name: 'TransferenciaModal',
            template: '#template-transferencia-modal',
            mixins: [BaseMixin],
            emits: ['transferencia-salva'],
            components: { ConfirmationDialog },

            data: () => ({
                transferencia: {},

                meiosOrigem: [],
                meiosDestino: [],

                modal: null,
            }),

            computed: {

                labelTipo() {
                    return (this.transferencia.tipo == 1 ? "Transferência entre Contas" : "Pagamento de Fatura");
                },

                labelContaCartao() {
                    return (this.transferencia.tipo == 1 ? "Conta" : "Cartão");
                },

                hasFatura() {
                    return (this.transferencia.faturaMes != null);
                },
            },

            mounted() {
            },

            methods: {

                async carregar(id) {

                    try {

                        //clean-up
                        this.transferencia = {};
                        this.meiosOrigem = [];
                        this.meiosDestino = [];

                        await this.showLoadingSplashAndExecute(async () => {

                            //busca transferencia
                            let ret = await fetchData.fetchGetJson(`/transferencia/obter/${id}`);
                            this.transferencia = ret.value;

                            //conversoes e tratamentos
                            fieldConverter.moneyToString(this.transferencia, 'valor');
                            fieldConverter.dateStringIsoToInputString(this.transferencia, 'data');

                            //busca conta origem
                            let rc = await fetchData.fetchGetJson(`/common/contas`);
                            this.meiosOrigem = rc.value;

                            //busca meio destino
                            let url = (this.transferencia.tipo == 1 ? '/common/contas' : '/common/cartoes');
                            let rd = await fetchData.fetchGetJson(url);
                            this.meiosDestino = rd.value;

                        });

                        this.modal = bootstrapHelper.openModal(this.$refs.modalForm);

                    }
                    catch (e) {
                        mensagemSistema.showMensagemErro(e);
                    }
                },

                fechar() {
                    this.cleanValidationForm(this.$refs.form);
                    bootstrapHelper.closeModal(this.modal);
                },

                async salvar() {

                    let isValido = this.validarForm(this.$refs.form);

                    if (isValido) {
                        let ret = null;

                        await this.setLoadingAndExecute(async () => {
                            try {

                                //conversões
                                fieldConverter.stringToMoney(this.transferencia, 'valor');

                                ret = await fetchData.fetchPostJson('/transferencia/alterar', this.transferencia);

                                if (ret.ok) {
                                    mensagemSistema.showMensagemSucesso(ret.message);
                                    this.fechar();
                                    this.$emit('transferencia-salva', ret.value.id);
                                }
                                else {
                                    mensagemSistema.showMensagemErro(ret.message);
                                }
                            }
                            catch (e) {
                                mensagemSistema.showMensagemErro(e);
                            }
                        });
                    }
                },

                async excluir() {

                    const confirma = await this.$refs.confirmaAcao.aguardarConfirmacao({
                        titulo: 'Exclusão de Transferência',
                        mensagem: `Deseja realmente excluir esta Transferência?`,
                        okLabel: 'Excluir',
                    });

                    if (confirma) {

                        await this.showLoadingSplashAndExecute(async () => {

                            let ret = await fetchData.fetchPostJson('/transferencia/excluir', this.transferencia.idLancamentoOrigem);

                            if (ret.ok) {
                                mensagemSistema.showMensagemSucesso(ret.message);
                                this.fechar();
                                this.$emit('transferencia-salva', this.transferencia.id);
                            }
                            else {
                                mensagemSistema.showMensagemErro(ret.message);
                            }
                        });
                    }
                },

            }
        }

    </script>
}

@using (Html.VueStyle())
{
    @* Não há css específico deste componente *@
}